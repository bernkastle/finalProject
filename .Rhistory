library(Matrix)
library(Matrix)
library(arules)
load(file.choose())
View(titanic.raw)
head(titanic.raw)
attach(titanic.raw)
rules = apriori(titanic.raw)
inspect(rules)
View(titanic.raw)
library(arules)
rules <- apriori(titanic.raw, parameter = list(minlen=2, supp=0.005, conf=0.8), appearance = list(rhs=c("Survived=No", "Survived=Yes"), default="lhs"), control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
inspect(rules)
?apriori
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
[1] 2 4 7 8
> # remove redundant rules
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
#Visualizing Association Rules
#Package arulesViz supports visualization of association rules with scatter plot, balloon plot, graph, parallel coordinates plot, etc.
install.packages( arules , scatterplot3d, vcd, seriation, igraph,"grid","cluster","TSP","gclus", "colorspace")
install.packages("arulesViz")
library(arulesViz)
plot(rules.pruned)
library("dplyr")
library("MASS") ##used to produce multivariable normal distrubution
library("mvtnorm") ##used to produce density of normal distrubution
library("rgl") ##used to plot 3D graph
# read data from files
rm(list = ls())
data = read.table(file.choose(), header = F, sep = "\t", fill = T, col.names = c("date", "time", "sensor", "state", "action"), as.is = T)
#extract begin and end information
times = grep(".", data$action)
times = data[times,]
times = dplyr::select(times, c(date, time, action))
times$date = times$date[[1]]
#create timestamp
times$timestamp = paste(times$date, times$time, sep = " ")
times$timestamp = as.POSIXct(times$timestamp)
View(data)
View(times)
View(times)
#calculate duration of each action and begin by seconds
for(x in seq(1, 4300, 2)){
temp = difftime(times$timestamp[[x+1]], times$timestamp[[x]], units = "secs")
times$dur[[x+1]] = temp
times$dur[[x]] = 0
temp = difftime(times$timestamp[[x]], "2008-02-07 00:00:00", units = "mins")
times$beginBySeconds[[x]] = temp
}
rm(x)
#get start time and duration
sta_dur = grep("* begin", times$action, ignore.case = T)
sta_dur = dplyr::select(times[sta_dur,], c(action, timestamp, dur, beginBySeconds))
View(sta_dur)
eat = sta_dur[grep("eat *", sta_dur$action, ignore.case = T),]
View(eat)
rm(eat)
View(sta_dur)
View(sta_dur)
rm(list = ls())
data = read.table(file.choose(), header = F, sep = "\t", fill = T, col.names = c("date", "time", "sensor", "state", "action"), as.is = T)
#extract begin and end information
times = grep(".", data$action)
times = data[times,]
times = dplyr::select(times, c(date, time, action))
times$date = times$date[[1]]
#create timestamp
times$timestamp = paste(times$date, times$time, sep = " ")
times$timestamp = as.POSIXct(times$timestamp)
#calculate duration of each action and begin by seconds
for(x in seq(1, 4300, 2)){
temp = difftime(times$timestamp[[x+1]], times$timestamp[[x]], units = "secs")
times$dur[[x+1]] = temp
times$dur[[x]] = 0
temp = difftime(times$timestamp[[x]], "2008-02-07 00:00:00", units = "mins")
times$beginBySeconds[[x]] = temp
}
rm(x)
#get start time and duration
sta_dur = grep("* begin", times$action, ignore.case = T)
sta_dur = dplyr::select(times[sta_dur,], c(action, timestamp, dur, beginBySeconds))
View(sta_dur)
View(times)
View(sta_dur)
View(times)
View(data)
View(sta_dur)
View(times)
View(times)
View(times)
action_begin = dplyr::select(times, c(action, timestamp))
View(action_begin)
action_begin = grep("*begin", action_begin$action)
action_begin = dplyr::select(times, c(action, timestamp))
action_begin = action_begin[grep("*begin", action_begin$action)]
action_begin = action_begin[grep("*begin", action_begin$action),]
View(action_begin)
library(Ckmeans.1d.dp)
x <- rnorm(50, mean=-1, sd=0.3)
x <- append(x, rnorm(50, mean=1, sd=0.3) )
res <- Ckmeans.1d.dp(x)
print(res)
print(res)
Ckmeans.1d.dp(action_begin$timestamp)
cluster_info = Ckmeans.1d.dp(action_begin$timestamp)
library(data.table)
View(action_begin)
action_begin[, cluster_info := cluster_info$cluster]
?:=
help(":=")
DT = data.table(a=LETTERS[c(1,1:3)],b=4:7,key="a")
View(DT)
DT[,c:=8]
View(DT)
table()
?table()
?tables()
tables()
data.table(action_begin)
action_begin = data.table(action_begin)
tables()
action_begin[, cluster_info := cluster_info$cluster]
View(action_begin)
?"data.table"
action_begin[, successor := action_begin$[2:120]]
action_begin[, successor := action_begin$action[2:120]]
View(data)
View(data)
View(action_begin)
View(action_begin)
action_relationship = action_begin[!2]
View(action_relationship)
View(action_begin)
View(action_relationship)
View(action_begin)
action_relationship = action_begin[, !2]
action_relationship = action_begin[,!2]
action_begin[2]
action_begin[,2]
action_begin[,3]
action_begin[,10]
action_begin[10,10]
action_begin[1,1]
action_begin[[1]]
action_begin[[2]]
action_begin[[!2]]
action_begin[,[!2]]
action_begin[1[2]]
action_begin[2,[2]]
action_begin[,2,with = F]
action_begin[,!2,with = F]
action_relationship = action_begin[,!2,with = F]
View(action_relationship)
View(action_begin)
View(action_relationship)
rules = apriori(action_relationship)
View(action_relationship)
as.factor(action_relationship)
as.factor(action_relationship[, 1:3, with = F])
as.factor(action_relationship[, 1, with = F])
sort.list(action_relationship)
sort.list(action_relationship[, 1, with = F])
sort.list(action_relationship[[1]])
str(action_relationship)
apriori(action_relationship)
as.factor(action_relationship$action)
as.factor(action_relationship)
action_relationship[1]
action_relationship[,1]
action_relationship[,1, with = F]
action_relationship[,1:3, with = F]
as.factor(action_relationship[, 1:3, with = F])
DF <- as.data.frame(unclass(action_relationship))
View(DF)
str(DF)
?as.data.frame()
df = as.data.frame(action_relationship, stringsAsFactor = T)
View(df)
str(df)
df = as.data.frame(action_relationship, stringsAsFactor = F)
str(df)
?unclass
for(x in 1:3){
action_relationship[,x, with = F] = as.factor(action_relationship[, x, with = F])
}
action_relationship[, 1, with=F]
as.factor(action_relationship[, 1, with=F])
for(x in 1:3){
action_relationship[[x]] = as.factor(action_relationship[[x]])
}
for(x in 1:3){
action_relationship[[x]] = as.factor(action_relationship[[x]])
}
str(action_relationship)
apriori(action_relationship)
rules = apriori(action_relationship)
inspect(rules)
rules = apriori(action_relationship, appearance = list(rhs = "successor*"), defult = "lhs")
rules = apriori(action_relationship, appearance = list(rhs = "successor*", defult = "lhs"))
rules = apriori(action_relationship, appearance = list(rhs = "successor*"))
rules = apriori(action_relationship, appearance = list(rhs = "successor=*"))
rules = apriori(action_relationship, appearance = list(rhs = "successor=Clean begin"))
rules = apriori(action_relationship, appearance = list(rhs =c("successor=*"))
)
?apriori
rules = apriori(action_relationship, appearance = list(rhs =c("successor=*"), default= "lhs"))
rules = apriori(action_relationship, appearance = list(rhs =c("successor"), default= "lhs"))
rules = apriori(action_relationship)
inspect(rules)
rule = inspect(rules)
?apriori
rules = apriori(action_relationship, appearance = list(labels = "action", default= "lhs"))
inspect(rules)
rules = apriori(action_relationship, appearance = list(labels = "successor", default= "lhs"))
inspect(rules)
rules = apriori(action_relationship)
inspect(rules)
rules = apriori(action_relationship, appearance = list(items = "successor", default= "rhs"))
rules = apriori(action_relationship, appearance = list(labels = "successor", default= "rhs"))
inspect(rules)
rules = apriori(action_relationship, appearance = list(labels = "successor", default= "both"))
inspect(rules)
rules = apriori(action_relationship, appearance = list(labels = "successor", default= "lhs"))
inspect(rules)
rules = apriori(action_relationship, appearance = list(labels = "successor", default= "rhs"))
inspect(rules)
inspect(rules)
rules = apriori(action_relationship, appearance = list(labels = "action", default= "both"))
inspect(rules)
rules = apriori(action_relationship, appearance = list(rhs = c("successor= *"), default= "lhs"))
rule@itemset
rules$itemsets
rules$itemset
inspect(rules)
View(action_relationship)
View(action_relationship)
View(data)
View(data)
View(sta_dur)
View(times)
View(action_relationship)
str(action_relationship)
rules_sub = subset(rules, subset = rhs %pin% "successor=")
inspect(rules_sub)
View(DF)
View(times)
View(data)
View(times)
View(action_relationship)
View(times)
View(times)
View(action_begin)
View(action_relationship)
View(action_begin)
View(data)
View(times)
View(times)
View(times)
View(action_begin)
